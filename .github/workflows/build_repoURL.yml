name: Build from repo URL

# 需要设置的变量
# DOCKERHUB_USERNAME dockerhub的账号
# DOCKERHUB_PASSWORD dockerhub的密码
# 需要设置的输入
# reop_name dockerhub的项目名(必填，全小写)
# reop_url 项目的clone地址
# version 标识的版本
# dockerfile_path Dockerfile路径 (可选，如果不在根目录)
# platform_armv6 是否构建 ARM v6
# platform_armv7 是否构建 ARM v7
# platform_amd64 是否构建 AMD64
# platform_arm64 是否构建 ARM64
# custom_command 自定义命令 (可选，用于在构建前执行，例如: sed -i 's/ubuntu:focal/alpine:3.18/g' Dockerfile)

on:
    workflow_dispatch:
        inputs:
            reop_name:
                description: 'Name,DockerHub的项目名(必填，全小写)'
                required: true
                default: 
            reop_url:
                description: 'RepoUrl,项目的clone地址，里面要有dockerfile'
                required: true
                default: 
            version:
                description: 'VERSION，标识的版本'
                required: true
                default: 
            dockerfile_path:
                description: 'Dockerfile路径 (可选，如果不在根目录)'
                required: false
                default: 'Dockerfile'
            platform_armv6:
                description: '是否构建 ARM v6 平台'
                required: false
                type: boolean
                default: true
            platform_armv7:
                description: '是否构建 ARM v7 平台'
                required: false
                type: boolean
                default: true
            platform_amd64:
                description: '是否构建 AMD64 平台'
                required: false
                type: boolean
                default: true
            platform_arm64:
                description: '是否构建 ARM64 平台'
                required: false
                type: boolean
                default: true
            custom_command:
                description: '自定义命令 (可选，用于在构建前执行，例如: sed -i "s/ubuntu:focal/alpine:3.18/g" Dockerfile)'
                required: false
                default: ''

run-name: ${{ github.actor }} is testing build ${{ github.event.inputs.reop_name }}:${{ github.event.inputs.version }} from ${{ github.event.inputs.reop_url }} 🚀

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    
      - name: Clone custom repository
        run: git clone ${{ github.event.inputs.reop_url }} .

      - name: Execute custom command
        if: ${{ github.event.inputs.custom_command != '' }}
        run: ${{ github.event.inputs.custom_command }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Docker login
        uses: docker/login-action@v2
        with:
            username: "${{ secrets.DOCKERHUB_USERNAME }}"
            password: "${{ secrets.DOCKERHUB_PASSWORD }}"
      
      - name: Set platforms
        id: set_platforms
        run: |
          PLATFORMS=""
          if [ "${{ github.event.inputs.platform_armv6 }}" = "true" ]; then
            PLATFORMS="$PLATFORMS linux/arm/v6,"
          fi
          if [ "${{ github.event.inputs.platform_armv7 }}" = "true" ]; then
            PLATFORMS="$PLATFORMS linux/arm/v7,"
          fi
          if [ "${{ github.event.inputs.platform_amd64 }}" = "true" ]; then
            PLATFORMS="$PLATFORMS linux/amd64,"
          fi
          if [ "${{ github.event.inputs.platform_arm64 }}" = "true" ]; then
            PLATFORMS="$PLATFORMS linux/arm64"
          fi
          # Remove trailing comma if exists
          PLATFORMS=$(echo $PLATFORMS | sed 's/,$//')
          echo "PLATFORMS=$PLATFORMS" >> $GITHUB_OUTPUT
      
      - name: Build and push images
        uses: docker/build-push-action@v4
        with:
            context: .
            file: ${{ github.event.inputs.dockerfile_path }}
            platforms: ${{ steps.set_platforms.outputs.PLATFORMS }}
            push: true
            tags: "jackadam/${{ github.event.inputs.reop_name }}:${{ github.event.inputs.version }},jackadam/${{ github.event.inputs.reop_name }}:latest"
      
        # 现在仓库应该已存在，可以更新描述
      - name: push README to Dockerhub
        uses: christian-korneck/update-container-description-action@v1
        env:
            DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
            DOCKER_PASS: ${{ secrets.DOCKERHUB_PASSWORD }}
        with:
            destination_container_repo: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.reop_name }}
            provider: dockerhub
            short_description: 'my short description 😊'
            readme_file: 'README.md'